#!/usr/bin/env perl

use warnings;
use strict;
use Fcntl;
use IO::File;

my $cmdname = $0; $cmdname =~ s{.*/}{};
my $usage = "Usage: $cmdname [-op operators] namespace op-header yy.tab.cpp out.hpp out.cpp\n";
my $operators;
if ($ARGV[0] eq "-op") {
   shift;
   die $usage unless @ARGV > 0;
   $operators = shift;
}
die $usage unless @ARGV == 5;
my $namespace = shift;
my $opheader = shift;
my $source = shift;
my $out_hpp = shift;
my $out_cpp = shift;
my $prefix;
if ($namespace eq "Astl") {
   $prefix = "";
} else {
   $prefix = "Astl::";
}

my %optext;
if (defined $operators) {
   my $in = new IO::File $operators
      or die "$cmdname: unable to open $operators for reading: $!\n";
   while (<$in>) {
      next if m{^#};
      next unless my ($opname, $optext) = m{^([A-Za-z_][A-Za-z_0-9]*):(.*)$};
      $optext{$opname} = $optext;
   }
}

my $in = new IO::File $source
   or die "$cmdname: unable to open $source for reading: $!\n";

my $found = 0;
while (<$in>) {
   next unless m{parser::yytname_\[\]\s=};
   $found = 1;
   last;
}
die "$cmdname: start of yytname table not found\n" unless $found;

my @symbols;
while (<$in>) {
   chomp;
   last if m{\};$};
   s/^\s+//;
   s/,$//;
   s/, 0$//;
   s/, YY_NULLPTR$//;
   s/, YY_NULL$//;
   foreach my $symbol (split /,\s+/) {
      $symbol =~ s/^"//;
      $symbol =~ s/"$//;
      next unless $symbol =~ m{^[A-Za-z_][A-Za-z_0-9]*$};
      next if $symbol eq "error";
      push(@symbols, $symbol);
   }
}

gen_hpp();
gen_cpp();

sub gen_hpp {
   my $out = new IO::File $out_hpp, O_WRONLY|O_CREAT|O_TRUNC, 0666
      or die "$cmdname: unable to open $out_cpp for writing: $!\n";
   print $out "// generated by $cmdname; please do not edit it\n\n";
   my $header_symbol = uc $namespace . "_OPERATORS_H";
   print $out "#ifndef $header_symbol\n";
   print $out "#define $header_symbol\n\n";
   print $out "#include <$opheader>\n\n";

   my $opcode = 1;
   foreach my $symbol (@symbols) {
      my $macro = uc $namespace . "_OPERATOR_" . uc $symbol;
      if ($symbol =~ m{^[A-Z0-9_]+$}) {
	 $macro .= "_TK";
      }
      print $out "#define $macro ", $opcode++, "\n";
   }

   print $out "\nnamespace $namespace { namespace Op {\n";
   foreach my $symbol (@symbols) {
      print $out "   extern ${prefix}Operator ", $symbol, ";\n";
   }
   print $out "} }\n";

   print $out "#endif\n";
}

sub gen_cpp {
   my $out = new IO::File $out_cpp, O_WRONLY|O_CREAT|O_TRUNC, 0666
      or die "$cmdname: unable to open $out_cpp for writing: $!\n";
   print $out "#include <$opheader>\n";
   print $out "namespace $namespace { namespace Op {\n";
   my $opcode = 1;
   foreach my $symbol (@symbols) {
      my $optext = $symbol;
      if (defined $optext{$symbol}) {
	 $optext = $optext{$symbol};
      }
      print $out "   ${prefix}Operator ", $symbol, "(", $opcode++, ", ",
	 '"', $optext, '");', "\n";
   }
   print $out "} }\n";
}
